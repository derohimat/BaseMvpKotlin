apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

// start - do not modify this if your project is on github
def siteUrl = "https://github.com/${github_username}/${github_repository_name}"
def gitUrl = siteUrl + '.git'
def bugTrackerUrl = siteUrl + '/issues/'
def projectName = github_repository_name
// end - do not modify this if your project is on github

group = library_project_group
version = library_version

android {
    compileSdkVersion target_sdk

    defaultConfig {
        minSdkVersion min_sdk
        targetSdkVersion target_sdk
        versionCode version_code
        versionName library_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    androidExtensions {
        experimental = true
    }

}

dependencies {
    // Testing - https://developer.android.com/training/testing/set-up-project
    testImplementation "junit:junit:$junit_version"

    // Core library
    androidTestImplementation "androidx.test:core:$androidx_test_core_version"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$androidx_test_runner_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_rules_version"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$androidx_test_ext_junit_version"
    androidTestImplementation "androidx.test.ext:truth:$androidx_test_ext_truth_version"
    androidTestImplementation "com.google.truth:truth:$truth_version"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_test_espresso_version"

    // Kotlin
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Anko
    api 'org.jetbrains.anko:anko:0.10.8'
    api "org.jetbrains.anko:anko-commons:0.10.8"

    // Support
    api "androidx.appcompat:appcompat:$androidx_appcompat_version"
    api 'androidx.recyclerview:recyclerview:1.0.0'
    api 'com.google.android.material:material:1.0.0'
    api "androidx.core:core-ktx:$androidx_core_ktx"

    // RxJava Kotlin Android
    api 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Others
    api 'com.jakewharton.timber:timber:4.7.1'
    api 'com.github.derohimat:sweet-alert-dialog:1.5.5'
    api 'com.github.derohimat:DotLoadersPack-Android:v1.4.1'

}


// add the following information to the file: local.properties situated in the parent directory of
// where this file is:
//
// bintray.user=yourusername
// bintray.apikey=api key got from the bintray profile
//
// be sure to add local.properties to the .gitignore!

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            description library_description
            packaging 'aar'
            groupId library_project_group
            version version
            url siteUrl
            licenses {
                license {
                    name library_licenses[0]
                    url library_licenses_url
                }
            }
            developers {
                developer {
                    id properties.getProperty("bintray.user")
                    name maintainer
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl

            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "BaseMvpKotlin"
        name = projectName
        desc = library_description
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = bugTrackerUrl
        licenses = library_licenses
        labels = library_keywords
        publicDownloadNumbers = true
        publish = true
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt'] // < ---- Exclude all kotlin files from javadoc file.

    title = "$projectName $project.version API"
    description "Generates Javadoc"
    source = android.sourceSets.main.java.srcDirs
    classpath += files(android.bootClasspath)
    exclude '**/BuildConfig.java', '**/R.java'
    options {
        windowTitle("$projectName $project.version Reference")
        locale = 'en_US'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        links("http://docs.oracle.com/javase/7/docs/api/")
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        setMemberLevel(JavadocMemberLevel.PUBLIC)
        addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
